theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = 0.274, col = 'white', alpha = 0.5, linetype = 'dashed') +
geom_hline(yintercept = 0.516, col = 'white', alpha = 0.5, linetype = 'dashed') +
geom_hline(yintercept = 0.774, col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774)) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774)) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774, 1)) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774, 1), labels = percent()) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774, 1), labels = scales::percent()) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774, 1), labels = scales::percent) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774, 1), labels = scales::percent) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = '\nSeasons', y = '')  # Set x and y axis labels to empty
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774, 1), labels = scales::percent) +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = 'Seasons', y = '')  # Set x and y axis labels to empty
# Save the plot as a PNG file
ggsave(
filename = 'goalie-six-one.png',  # Specify the file name
path = '/Users/ada/Documents/projects/spazznolo.github.io/figs',  # Specify the file path
width = 5,  # Set the width of the plot
height = 3,  # Set the height of the plot
device = 'png',  # Specify the device to use for saving (PNG format)
dpi = 320  # Set the resolution of the plot
)
list_of_goalies = read_html('https://www.hockey-reference.com/leagues/NHL_2023_goalies.html')
library(rvest)
list_of_goalies = read_html('https://www.hockey-reference.com/leagues/NHL_2023_goalies.html')
list_of_goalies
skater_list <-
tibble(
'player' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_text(),
'link' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
)
skater_list
goalie_list <-
tibble(
'player' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_text(),
'link' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
)
test <- read_html('https://www.hockey-reference.com/players/a/alexaje01.html')
test
test %>% html_nodes("td[data-stat='player']")
test %>% html_nodes("p")
test %>% html_nodes("p") %>% html_attr("necro-birth")
test %>% html_nodes("p") %>% html_attr("data-birth")
test %>% html_nodes("p") %>% html_nodes("a") %>% html_attr("href")
test %>% html_nodes("p") %>% html_nodes("span")
test %>% html_nodes("p") %>% html_nodes("span") %>% html_nodes("id")
test %>% html_nodes("p") %>% html_nodes("span") %>% html_nodes("data-birth")
test %>% html_nodes("p") %>% html_nodes("span")
test %>% html_nodes("p") %>% html_nodes("span id")
test %>% html_nodes("p") %>% html_nodes("span")
test %>% html_nodes("p") %>% html_nodes("span") %>% html_nodes("id")
test %>% html_nodes("p") %>% html_element("span")
test %>% html_nodes("p") %>% html_element("span.id")
test %>% html_nodes("p") %>% html_element("span id")
test %>% html_nodes("p") %>% html_element("span")
test %>% html_nodes("p") %>% html_element("data-birth")
test %>% html_nodes("p") %>% html_elements("data-birth")
test %>% html_nodes("p") %>% html_nodes("data-birth")
test %>% html_nodes("p") %>% html_nodes("span")
test %>% html_nodes("p") %>% html_nodes("span") %>% html_nodes("a href")
test %>% html_nodes("p") %>% html_nodes("span") %>% html_nodes("a")
test %>% html_nodes("p") %>% html_nodes("span#necro-birth")
test %>% html_nodes("p") %>% html_nodes("span#necro-birth") %>% html_attr('data-birth')
test %>% html_nodes("p") %>% html_attr('data-birth')
test %>% html_nodes("p") %>% html_nodes("span#necro-birth") %>% html_attr('data-birth')
goalie_list
goalie_list <-
tibble(
'player' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_text(),
'link' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href"),
'link' = paste0('https://www.hockey-reference.com', link)
)
goalie_list <-
tibble(
'player' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_text(),
'link' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
) %>%
mutate(link = paste0('https://www.hockey-reference.com', link))
goalie_list
goalie_list <-
tibble(
'player' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_text(),
'link' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
) %>%
mutate(link = paste0('https://www.hockey-reference.com', link)) %>%
mutate(
dob = read_html(link) %>% html_nodes("p") %>% html_nodes("span#necro-birth") %>% html_attr('data-birth')
)
test %>% html_nodes("p") %>% html_nodes("span#necro-birth") %>% html_attr('data-birth')
goalie_list <-
tibble(
'player' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_text(),
'link' = list_of_goalies %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
) %>%
mutate(link = paste0('https://www.hockey-reference.com', link))
get_dob <- function(goalie_link) {
dob = read_html(goalie_link) %>% html_nodes("p") %>% html_nodes("span#necro-birth") %>% html_attr('data-birth')
return(dob)
}
goalie_list
get_dob <- function(goalie_link) {
dob = read_html(goalie_link) %>% html_nodes("p") %>% html_nodes("span#necro-birth") %>% html_attr('data-birth')
Sys.sleep(10)
return(dob)
}
get_dob(goalie_list$link[1:5])
map(goalie_list$link[1:5], get_dob)
get_dob <- function(goalie_link) {
dob = read_html(goalie_link) %>% html_nodes("p") %>% html_nodes("span#necro-birth") %>% html_attr('data-birth')
Sys.sleep(1)
return(dob)
}
map(goalie_list$link[1:5], get_dob)
goalie_list
goalie_list %>%
mutate(dob = get_dob(link))
get_dob(goalie_list$link[1:5])
get_dob(goalie_list$link[1])
hm <- get_dob(goalie_list$link[1])
goalie_list %>% mutate(dob = map_chr(link, get_dob))
goalie_list %>% slice(1:2) %>% mutate(dob = map_chr(link, get_dob))
shots %>%
distinct(goalie_name, season) %>%
count(goalie_name) %>%
count(n) %>%
mutate(nn = cumsum(nn/sum(nn))) %>%
ggplot() +
geom_hline(yintercept = c(0.274, 0.516, 0.774, 1), col = 'white', alpha = 0.5, linetype = 'dashed') +
geom_vline(xintercept = c(1, 3, 7, 16), col = 'white', alpha = 0.5, linetype = 'dashed') +
geom_bar(aes(n, nn), fill = single_color, stat = 'identity') +
dark_theme() +
scale_y_continuous(breaks = c(0.274, 0.516, 0.774, 1), labels = scales::percent) +
scale_x_continuous(breaks = c(1, 3, 7, 16)) +
theme(
panel.grid.major = element_line(color = 'black')  # Customize major grid lines to be black
) +
labs(x = 'Seasons', y = '')  # Set x and y axis labels to empty
# Save the plot as a PNG file
ggsave(
filename = 'goalie-six-one.png',  # Specify the file name
path = '/Users/ada/Documents/projects/spazznolo.github.io/figs',  # Specify the file path
width = 5,  # Set the width of the plot
height = 3,  # Set the height of the plot
device = 'png',  # Specify the device to use for saving (PNG format)
dpi = 320  # Set the resolution of the plot
)
shots %>%
count(goalie_name, season)
shots %>%
count(goalie_name, season) %>%
add_count(goalie_name)
shots %>%
count(goalie_name, season) %>%
add_count(goalie_name) %>%
group_by(nn) %>%
summarize(mean(n))
shots %>%
count(goalie_name, season) %>%
add_count(goalie_name) %>%
group_by(nn) %>%
summarize(mean(n)/30)
# Function to get goalie data for a specific year
get_goalie_data <- function(year) {
# Create the URL based on the year
url <- paste0('https://www.hockey-reference.com/leagues/NHL_', year, '_goalies.html')
# Read the HTML page containing the list of goalies for the specified year
goalies_in_season <- read_html(url)
goalie_list <-
tibble(
'player' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_text(),  # Extract player names from list_of_goalies
'link' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")  # Extract links from list_of_goalies
)
return(goalie_list)
}
# Function to get goalie data for a specific year
get_goalie_links <- function(year) {
# Create the URL based on the year
url <- paste0('https://www.hockey-reference.com/leagues/NHL_', year, '_goalies.html')
# Read the HTML page containing the list of goalies for the specified year
goalies_in_season <- read_html(url)
goalie_list <-
tibble(
'player' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_text(),  # Extract player names from list_of_goalies
'link' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")  # Extract links from list_of_goalies
)
Sys.sleep(1)
return(goalie_list)
}
goalie_links <- map_dfr(2007:2023, get_goalie_links)
goalie_links
goalie_links %>%
distinct(link, .keep_all = TRUE)
# Function to get goalie data for a specific year
get_goalie_links <- function(year) {
# Create the URL based on the year
url <- paste0('https://www.hockey-reference.com/leagues/NHL_', year, '_goalies.html')
# Read the HTML page containing the list of goalies for the specified year
goalies_in_season <- read_html(url)
goalie_list <-
tibble(
'player' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_text(),  # Extract player names from list_of_goalies
'link' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")  # Extract links from list_of_goalies
)
Sys.sleep(1)
return(goalie_list)
}
# Function to retrieve the date of birth (DOB) from a goalie link
get_dob <- function(goalie_link) {
# Extract date of birth from goalie_link
dob <-
read_html(goalie_link) %>%
html_nodes("p") %>%
html_nodes("span#necro-birth") %>%
html_attr('data-birth')
Sys.sleep(1)  # Pause execution for 1 second to be respectful of the website's servers
return(dob)  # Return the date of birth
}
goalie_dob <-
map_dfr(2007:2023, get_goalie_links) %>%
distinct(link, .keep_all = TRUE) %>%  # Append base URL to create complete links
mutate(link = paste0('https://www.hockey-reference.com', link)) %>%  # Append base URL to create complete links
mutate(dob = map_chr(link, get_dob))  # Retrieve DOB for each goalie link
# Function to fetch goalie data for a specific year
get_goalie_data <- function(year) {
# Append URL wrap to create complete links
url <- paste0('https://www.hockey-reference.com/leagues/NHL_', year, '_goalies.html')
# Read the HTML page containing the list of goalies for the specified year
goalies_in_season <- read_html(url)
# Create a tibble containing player names and URLs for the specified year
goalie_data <-
tibble(
'player' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_text(),
'url' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
)
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(goalie_data)
}
# Function to retrieve the date of birth (DOB) from a goalie URL
get_dob <- function(goalie_url) {
# Append base URL to create complete links
goalie_url <- paste0('https://www.hockey-reference.com', goalie_url)
# Extract date of birth from goalie URL
dob <- tryCatch({
read_html(goalie_url) %>%
html_nodes("p") %>%
html_nodes("span#necro-birth") %>%
html_attr('data-birth')
}, error = function(e) {
NA  # Return NA in case of an error
})
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(dob)
}
# Fetch goalie data and date of birth for each year from 2007 to 2023
goalie_data <- map_dfr(2007:2023, get_goalie_data) %>%
distinct(url, .keep_all = TRUE) %>%  # Remove duplicate URLs
mutate(dob = map_chr(url, get_dob))  # Retrieve DOB for each goalie URL
close.connection()
close()
# Function to fetch goalie data for a specific year
get_goalie_data <- function(year) {
# Append URL wrap to create complete links
url <- paste0('https://www.hockey-reference.com/leagues/NHL_', year, '_goalies.html')
# Read the HTML page containing the list of goalies for the specified year
session <- html_session(url)  # Get the HTML session object
goalies_in_season <- read_html(session)  # Use the session to read the HTML page
# Close the connection
close(session)
# Create a tibble containing player names and URLs for the specified year
goalie_data <-
tibble(
'player' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_text(),
'url' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
)
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(goalie_data)
}
# Function to retrieve the date of birth (DOB) from a goalie URL
get_dob <- function(goalie_url) {
# Append base URL to create complete links
goalie_url <- paste0('https://www.hockey-reference.com', goalie_url)
# Read the HTML page containing the list of goalies for the specified year
session <- html_session(goalie_url)  # Get the HTML session object
goalie_info <- read_html(session)  # Use the session to read the HTML page
# Close the connection
close(session)
# Extract date of birth from goalie URL
dob <- tryCatch({
goalie_info %>%
html_nodes("p") %>%
html_nodes("span#necro-birth") %>%
html_attr('data-birth')
}, error = function(e) {
NA  # Return NA in case of an error
})
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(dob)
}
# Fetch goalie data and date of birth for each year from 2007 to 2023
goalie_data <- map_dfr(2007:2023, get_goalie_data) %>%
distinct(url, .keep_all = TRUE) %>%  # Remove duplicate URLs
mutate(dob = map_chr(url, get_dob))  # Retrieve DOB for each goalie URL
# Run garbage collection to close unused connections
gc(verbose = TRUE)
# Function to fetch goalie data for a specific year
get_goalie_data <- function(year) {
# Append URL wrap to create complete links
url <- paste0('https://www.hockey-reference.com/leagues/NHL_', year, '_goalies.html')
# Read the HTML page containing the list of goalies for the specified year
session <- html_session(url)  # Get the HTML session object
goalies_in_season <- read_html(session)  # Use the session to read the HTML page
# Close the connection
close(session)
# Create a tibble containing player names and URLs for the specified year
goalie_data <-
tibble(
'player' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_text(),
'url' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
)
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(goalie_data)
}
# Function to retrieve the date of birth (DOB) from a goalie URL
get_dob <- function(goalie_url) {
# Append base URL to create complete links
goalie_url <- paste0('https://www.hockey-reference.com', goalie_url)
# Read the HTML page containing the list of goalies for the specified year
session <- html_session(goalie_url)  # Get the HTML session object
goalie_info <- read_html(session)  # Use the session to read the HTML page
# Close the connection
close(session)
# Extract date of birth from goalie URL
dob <- tryCatch({
goalie_info %>%
html_nodes("p") %>%
html_nodes("span#necro-birth") %>%
html_attr('data-birth')
}, error = function(e) {
NA  # Return NA in case of an error
})
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(dob)
}
# Fetch goalie data and date of birth for each year from 2007 to 2023
goalie_data <- map_dfr(2007:2023, get_goalie_data) %>%
distinct(url, .keep_all = TRUE) %>%  # Remove duplicate URLs
mutate(dob = map_chr(url, get_dob))  # Retrieve DOB for each goalie URL
# Run garbage collection to close unused connections
gc(verbose = TRUE)
# Function to fetch goalie data for a specific year
get_goalie_data <- function(year) {
# Append URL wrap to create complete links
url <- paste0('https://www.hockey-reference.com/leagues/NHL_', year, '_goalies.html')
# Read the HTML page containing the list of goalies for the specified year
goalies_in_season <- read_html(url)
# Create a tibble containing player names and URLs for the specified year
goalie_data <-
tibble(
'player' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_text(),
'url' = goalies_in_season %>% html_nodes("td[data-stat='player']") %>% html_nodes("a") %>% html_attr("href")
)
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(goalie_data)
}
# Function to retrieve the date of birth (DOB) from a goalie URL
get_dob <- function(goalie_url) {
# Append base URL to create complete links
goalie_url <- paste0('https://www.hockey-reference.com', goalie_url)
# Read the HTML page containing goalie information
goalie_info <- read_html(goalie_url)
# Extract date of birth from goalie URL
dob <- tryCatch({
goalie_info %>%
html_nodes("p") %>%
html_nodes("span#necro-birth") %>%
html_attr('data-birth')
}, error = function(e) {
NA  # Return NA in case of an error
})
Sys.sleep(3)  # Pause execution for 3 seconds to be more respectful of the website's servers
return(dob)
}
# Fetch goalie data and date of birth for each year from 2007 to 2023
goalie_data <- map_dfr(2007:2023, get_goalie_data) %>%
distinct(url, .keep_all = TRUE) %>%  # Remove duplicate URLs
mutate(dob = map_chr(url, get_dob))  # Retrieve DOB for each goalie URL
# insert download directory here
download_dir <- 'data/'
# download moneypuck data
temp <- tempfile()
download.file("https://peter-tanner.com/moneypuck/downloads/shots_2007-2021.zip", temp)
